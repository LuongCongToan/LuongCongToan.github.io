(function (root) {
  var exports = undefined,
      module = undefined,
      require = undefined;
  var define = undefined;
  (function () {
    !function c(s, a, r) {
      function u(t, n) {
        if (!a[t]) {
          if (!s[t]) {
            var e = "function" == typeof require && require;
            if (!n && e) return e(t, !0);
            if (d) return d(t, !0);
            var o = new Error("Cannot find module '" + t + "'");
            throw o.code = "MODULE_NOT_FOUND", o;
          }

          var i = a[t] = {
            exports: {}
          };
          s[t][0].call(i.exports, function (n) {
            return u(s[t][1][n] || n);
          }, i, i.exports, c, s, a, r);
        }

        return a[t].exports;
      }

      for (var d = "function" == typeof require && require, n = 0; n < r.length; n++) u(r[n]);

      return u;
    }({
      1: [function () {
        "use strict";

        window.ReactNativeWebView = {
          postMessage: function (n) {
            console.log({
              message: n
            });
            var t = JSON.parse(n);

            if ("show_song_list" === t.type) {
              var e = window.song;
              document.dispatchEvent(new CustomEvent("show_song_list_result", {
                detail: '{"songID":"'.concat(e.songId, '","duration":"').concat(e.duration, '","songName":"').concat(e.title, '","artist":"').concat(e.artist, '"}')
              }));
            } else if ("request_download_song" === t.type) {
              var o = window.song;
              document.dispatchEvent(new CustomEvent("response_download_song", {
                detail: '{"serverURL":"'.concat(o.mp3Url.replace(".mp3", ""), '","mp3Url":"').concat(o.mp3Url, '","levelUrl":"').concat(o.mp3Url.replace(".mp3", ".bin"), '","songData":\n          {"songID":"').concat(o.songId, '","duration":"').concat(o.duration, '","songName":"').concat(o.title, '","artist":"').concat(o.artist, '"}}')
              }));
            }
          }
        }, window.TestHelper = {
          init: function (n) {
            window.song = n;
          }
        }, window.Platform = {
          emitOnBackground: function () {
            document.dispatchEvent(new CustomEvent("OnAppBackground", {
              detail: "{}"
            }));
          },
          emitOnForeground: function () {
            document.dispatchEvent(new CustomEvent("OnAppForeground", {
              detail: "{}"
            }));
          },
          emitReviseYes: function () {
            document.dispatchEvent(new CustomEvent("show_continue_screen_action", {
              detail: '{"action":"continue"}'
            })), document.dispatchEvent(new CustomEvent("onAdsRewardSuccess", {
              detail: "{}"
            }));
          },
          emitReviseNo: function () {
            document.dispatchEvent(new CustomEvent("show_continue_screen_action", {
              detail: '{"action":"continue"}'
            })), document.dispatchEvent(new CustomEvent("onAdsRewardFailed", {
              detail: "{}"
            }));
          },
          emitRestart: function () {
            document.dispatchEvent(new CustomEvent("show_result_screen_action", {
              detail: '{"action":"songselect"}'
            }));
          }
        };
      }, {}]
    }, {}, [1]);
  }).call(root);
})( // The environment-specific global.
function () {
  if (typeof globalThis !== 'undefined') return globalThis;
  if (typeof self !== 'undefined') return self;
  if (typeof window !== 'undefined') return window;
  if (typeof global !== 'undefined') return global;
  if (typeof this !== 'undefined') return this;
  return {};
}.call(this));