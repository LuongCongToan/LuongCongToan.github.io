[{"__type__":"cc.Material","_name":"SaberEdge","_effectAsset":{"__uuid__":"6dkeWRTOBGXICfYQ7JUBnG"},"_defines":{"USE_DIFFUSE_TEXTURE":true,"INPUT_IS_GAMMA":false,"OUTPUT_TO_GAMMA":false,"USE_ALPHA_TEST":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"b":13},"alphaThreshold":0.01,"diffuseTexture":{"__uuid__":"4c6eGFQh5ADo4tH6mVGUPw"}}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_21","texture":"13tufXez1NLIfSNGoBY2EW","rect":[1,47,62,17],"offset":[0,-23.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.Material","_name":"background","_effectAsset":{"__uuid__":"796vrvt+9F2Zw/WR3INvx6"},"_defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":true},"_props":{"alphaThreshold":0.01,"diffuseTexture":{"__uuid__":"20rA7LNTlHVbhX8gvZXKQE"}}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_30","texture":"40p7dv4HZKDKvZ2mFy/kdC","rect":[0,25,64,39],"offset":[0,-12.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":3776},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":118}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":3776,"length":792}}],"_minPos":{"__type__":"cc.Vec3","x":-1,"y":-1,"z":-1},"_maxPos":{"__type__":"cc.Vec3","x":1,"y":1,"z":1}},[{"__type__":"cc.Prefab","_name":"BoxEdge","data":{"__id__":1}},{"__type__":"cc.Node","_name":"RootNode","_children":[{"__id__":2}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"ceb8325a-fdad-486a-9f56-84b157395071"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"BoxEdges","_parent":{"__id__":1},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":2},"_materials":[{"__uuid__":"9e5lc3GYtJVp6etQyFytAI"}],"_mesh":{"__uuid__":"6foi24wXhPQosTrHESChD+"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"BoxEdges"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true}],{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_58","texture":"18MMvgT+9FsL/1NeWlSsZK","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.Material","_name":"perfectzone","_effectAsset":{"__uuid__":"796vrvt+9F2Zw/WR3INvx6"},"_defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":true},"_props":{"alphaThreshold":0.001,"diffuseTexture":{"__uuid__":"ebd7BKA5NE4JBkoEcOS4tc"}}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_05","texture":"83HX9/OiJAsI7sPzryMf6x","rect":[27,52,10,10],"offset":[0,-25],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_33","texture":"50gk+9N6xMqI3C1b+UgQlO","rect":[0,21,64,43],"offset":[0,-10.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_41","texture":"461SaBXaZBr7UD2Ffbzjav","rect":[0,3,64,61],"offset":[0,-1.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_disabled","texture":"71VhFCTINJM6/Ky3oX9nBT","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_53","texture":"60aRivn4pE3Kf//ecCJLuO","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_13","texture":"66dlxuYFtGEbAkaa+ye2ub","rect":[16,48,32,16],"offset":[0,-24],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_34","texture":"3bBDPA2XBNUasOCgyv119K","rect":[0,18,64,46],"offset":[0,-9],"originalSize":[64,64],"capInsets":[0,0,0,0]}},[{"__type__":"cc.SceneAsset","_name":"main","scene":{"__id__":1},"asyncLoadAssets":null},{"__type__":"cc.Scene","_name":"New Node","_children":[{"__id__":2},{"__id__":10},{"__id__":40}],"_active":false,"_anchorPoint":{"__type__":"cc.Vec2"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"autoReleaseAssets":false},{"__type__":"cc.Node","_name":"Canvas","_parent":{"__id__":1},"_children":[{"__id__":3},{"__id__":5},{"__id__":6},{"__id__":7},{"__id__":29},{"__id__":32}],"_components":[{"__type__":"cc.Canvas","node":{"__id__":2},"_designResolution":{"__type__":"cc.Size","width":640,"height":960},"_fitWidth":true,"_fitHeight":false}],"_contentSize":{"__type__":"cc.Size","width":640,"height":960},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[320,480,0,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1,"_id":"4exxgNO5dD4rGK8Ao/0IvD"},{"__type__":"cc.Node","_name":"Main Camera","_parent":{"__id__":2},"_components":[{"__id__":4}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,831.3843876330611,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Camera","node":{"__id__":3},"_cullingMask":2,"_clearFlags":0,"_depth":1},{"__type__":"cc.Node","_name":"trail","_parent":{"__id__":2},"_components":[{"__type__":"cc.MotionStreak","node":{"__id__":5},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_fadeTime":0.2,"_minSeg":0.3,"_stroke":20,"_texture":{"__uuid__":"938ils6K1Jd5MSl2ICyN5R"},"_fastMode":true}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[33.446,-91.387,-1079.303,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"New Directional Light","_parent":{"__id__":2},"_active":false,"_components":[{"__type__":"cc.Light","node":{"__id__":6},"_color":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":200},"_shadowMaxDepth":1000,"_shadowFrustumSize":50}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[72.308,139.849,808.018,-0.35853017728723885,-0.02443542016871689,-0.009388443102630322,0.9331510485187636,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":-42.035,"y":-3},"_is3DNode":true},{"__type__":"cc.Node","_name":"first_screen","_parent":{"__id__":2},"_children":[{"__id__":8}],"_active":false,"_components":[{"__type__":"cc.Sprite","node":{"__id__":7},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"34qSExLxVKqpEgl9rKi0QS"},"_sizeMode":2,"_isTrimmedMode":false},{"__type__":"cc.Widget","node":{"__id__":7},"_alignFlags":18,"_left":220,"_right":220,"_top":405,"_bottom":405,"_originalWidth":200,"_originalHeight":150}],"_contentSize":{"__type__":"cc.Size","width":1080,"height":1920},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,202508275.2,0,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"buttonPlaynow","_parent":{"__id__":7},"_children":[{"__id__":9}],"_components":[{"__type__":"cc.Button","node":{"__id__":8},"_normalMaterial":{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":10},"_componentId":"ebf89glQ8FHrr7mHW/NMF76","handler":"onButtonPlayClick"}],"_N$transition":3,"transition":3,"_N$normalColor":{"__type__":"cc.Color","r":230,"g":230,"b":230},"_N$pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"_N$disabledColor":{"__type__":"cc.Color","r":120,"g":120,"b":120,"a":200},"_N$normalSprite":{"__uuid__":"38yiy1R71Ej6XMbybSwCas"},"_N$pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"_N$hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_N$disabledSprite":{"__uuid__":"29FYIk+N1GYaeWH/q1NxQO"},"_N$target":{"__id__":9}},{"__type__":"cc.Widget","node":{"__id__":8},"_alignFlags":18,"_verticalCenter":-54.85700000000001}],"_contentSize":{"__type__":"cc.Size","width":432,"height":125},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,-202508330.05699998,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Background","_parent":{"__id__":8},"_components":[{"__type__":"cc.Sprite","node":{"__id__":9},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"38yiy1R71Ej6XMbybSwCas"},"_type":1,"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":9},"alignMode":0,"_alignFlags":45,"_originalWidth":100,"_originalHeight":40}],"_contentSize":{"__type__":"cc.Size","width":432,"height":125},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"root","_parent":{"__id__":1},"_children":[{"__id__":11},{"__id__":13},{"__id__":15},{"__id__":17},{"__id__":19},{"__id__":24},{"__id__":25},{"__id__":26},{"__id__":27},{"__id__":28}],"_components":[{"__type__":"c619121KDVAW7kSE81CqHbJ","node":{"__id__":10},"root":{"__id__":19},"env_prefabs":[{"__uuid__":"8dMogY/R1DcqfqijJKwpXz"}],"start_position":{"__id__":20},"end_position":{"__id__":21}},{"__type__":"ebf89glQ8FHrr7mHW/NMF76","node":{"__id__":10},"trail":{"__id__":5},"uiCamera":{"__id__":4},"gameCamera":{"__id__":12},"spawnPositionNode":{"__id__":27},"targetBoxPositionNode":{"__id__":28},"boxPrefab":{"__uuid__":"d89Dp47w9PL7U10b7MihmD"},"halfBoxPrefab":{"__uuid__":"5210nRJoJM6aiAujwbz38l"},"firstScreen":{"__id__":7},"uiEndScreen":{"__id__":29},"uiHeader":{"__id__":32},"uiMissed":[{"__id__":33},{"__id__":34},{"__id__":35}],"uiLabelScore":{"__id__":37},"uiLabelCombo":{"__id__":39}},{"__type__":"cc.AudioSource","node":{"__id__":10},"_clip":{"__uuid__":"83bmsso/tOG4S/HjQkdUrO"}}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true,"_id":"ceech0AEpGQZdDSvjIMr9a"},{"__type__":"cc.Node","_name":"GameCamera","_parent":{"__id__":10},"_components":[{"__id__":12}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,531.526,831.3843876330611,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Camera","node":{"__id__":11},"_cullingMask":-3,"_clearFlags":7,"_nearClip":10,"_farClip":10000,"_ortho":false,"_renderStages":3},{"__type__":"cc.Node","_name":"boxedge","_parent":{"__id__":10},"_children":[{"__id__":14}],"_components":[{"__type__":"6d850Y/q1RD8auYk46GvaFY","node":{"__id__":13},"deltaAngle":{"__type__":"cc.Vec3","x":30,"y":30,"z":30}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"asset":{"__uuid__":"12lYWAbPFFSK7umhinLFNp"},"fileId":"ceb8325a-fdad-486a-9f56-84b157395071"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[32.564,1488.636,-1423.412,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"BoxEdges","_parent":{"__id__":13},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":14},"_materials":[{"__uuid__":"9e5lc3GYtJVp6etQyFytAI"}],"_mesh":{"__uuid__":"6foi24wXhPQosTrHESChD+"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"asset":{"__uuid__":"12lYWAbPFFSK7umhinLFNp"},"fileId":"BoxEdges"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,100,100,100]},"_is3DNode":true},{"__type__":"cc.Node","_name":"boxedge copy","_parent":{"__id__":10},"_children":[{"__id__":16}],"_components":[{"__type__":"6d850Y/q1RD8auYk46GvaFY","node":{"__id__":15},"deltaAngle":{"__type__":"cc.Vec3","x":25,"y":27,"z":-40}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":15},"asset":{"__uuid__":"12lYWAbPFFSK7umhinLFNp"},"fileId":"ceb8325a-fdad-486a-9f56-84b157395071"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[660.223,1762.271,-1819.903,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"BoxEdges","_parent":{"__id__":15},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":16},"_materials":[{"__uuid__":"9e5lc3GYtJVp6etQyFytAI"}],"_mesh":{"__uuid__":"6foi24wXhPQosTrHESChD+"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":15},"asset":{"__uuid__":"12lYWAbPFFSK7umhinLFNp"},"fileId":"BoxEdges"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,100,100,100]},"_is3DNode":true},{"__type__":"cc.Node","_name":"boxedge copy","_parent":{"__id__":10},"_children":[{"__id__":18}],"_components":[{"__type__":"6d850Y/q1RD8auYk46GvaFY","node":{"__id__":17},"deltaAngle":{"__type__":"cc.Vec3","x":-25,"y":-25,"z":30}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":17},"asset":{"__uuid__":"12lYWAbPFFSK7umhinLFNp"},"fileId":"ceb8325a-fdad-486a-9f56-84b157395071"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-506.816,1733.612,-1781.916,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"BoxEdges","_parent":{"__id__":17},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":18},"_materials":[{"__uuid__":"9e5lc3GYtJVp6etQyFytAI"}],"_mesh":{"__uuid__":"6foi24wXhPQosTrHESChD+"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":17},"asset":{"__uuid__":"12lYWAbPFFSK7umhinLFNp"},"fileId":"BoxEdges"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,100,100,100]},"_is3DNode":true},{"__type__":"cc.Node","_name":"endviroment","_objFlags":512,"_parent":{"__id__":10},"_children":[{"__id__":20},{"__id__":21},{"__id__":22},{"__id__":23}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"start_pos","_parent":{"__id__":19},"_active":false,"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,159.267,-9000,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"end_pos","_parent":{"__id__":19},"_active":false,"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,159.267,753.493,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"ExplosionFlare","_parent":{"__id__":19},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":22},"_materials":[{"__uuid__":"d9ZV4gILtFU43qBzUdcuk4"}],"_mesh":{"__uuid__":"e9PT+pjCFDdYohFLqEBmx3"}},{"__type__":"4431cb0ayRAq7IMUmCPus+L","node":{"__id__":22},"duration":5}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,-8614.267,0,0,0,1,2500,2500,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"background","_parent":{"__id__":19},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":23},"_materials":[{"__uuid__":"06oJczJBZNbZREGeGUtDAW"}],"_mesh":{"__uuid__":"e9PT+pjCFDdYohFLqEBmx3"}}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,-9010,0,0,0,1,100,100,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"plane","_parent":{"__id__":10},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":24},"_materials":[{"__uuid__":"a531W+rSNGT7Y84eQFqhUW"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"}}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,-4067.781,0,0,0,1,85.146,85.146,1000]},"_is3DNode":true},{"__type__":"cc.Node","_name":"PerfectZone","_parent":{"__id__":10},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":25},"_materials":[{"__uuid__":"1fWh0SX9hGSI1ti+wMZUqI"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"}}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,43.331,-477.437,0.07936383676270917,0,0,0.9968457159532271,70,70,70]},"_eulerAngles":{"__type__":"cc.Vec3","x":9.104},"_is3DNode":true},{"__type__":"cc.Node","_name":"edge","_parent":{"__id__":10},"_active":false,"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":26},"_materials":[{"__uuid__":"033lGPPaRA57R9uCuAmzOQ"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"},"_enableAutoBatch":true}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,-1146.901,0,0,0,1,146,146,146]},"_is3DNode":true},{"__type__":"cc.Node","_name":"spaw_box_position","_parent":{"__id__":10},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,106.254,-8422.339,0,0,0,1,100,100,100]},"_is3DNode":true},{"__type__":"cc.Node","_name":"target_box_position","_parent":{"__id__":10},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,106.254,-526.252,0,0,0,1,100,100,100]},"_is3DNode":true},{"__type__":"cc.Node","_name":"end_screen","_parent":{"__id__":2},"_children":[{"__id__":30}],"_active":false,"_components":[{"__type__":"cc.Sprite","node":{"__id__":29},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"34qSExLxVKqpEgl9rKi0QS"},"_type":1,"_sizeMode":2},{"__type__":"cc.Layout","node":{"__id__":29},"_layoutSize":{"__type__":"cc.Size","width":1080,"height":1920},"_N$affectedByScale":true},{"__type__":"cc.Widget","node":{"__id__":29},"_alignFlags":18,"_left":220,"_right":220,"_top":405,"_bottom":405,"_originalWidth":200,"_originalHeight":150},{"__type__":"cc.ToggleGroup","node":{"__id__":29}}],"_contentSize":{"__type__":"cc.Size","width":1080,"height":1920},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"buttonGotoStore","_parent":{"__id__":29},"_children":[{"__id__":31}],"_components":[{"__type__":"cc.Button","node":{"__id__":30},"_normalMaterial":{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":10},"_componentId":"ebf89glQ8FHrr7mHW/NMF76","handler":"onButtonGotoStoreClick"}],"_N$transition":3,"transition":3,"_N$normalColor":{"__type__":"cc.Color","r":230,"g":230,"b":230},"_N$pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"_N$disabledColor":{"__type__":"cc.Color","r":120,"g":120,"b":120,"a":200},"_N$normalSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_N$pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"_N$hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_N$disabledSprite":{"__uuid__":"29FYIk+N1GYaeWH/q1NxQO"},"_N$target":{"__id__":31}},{"__type__":"cc.Widget","node":{"__id__":30},"_alignFlags":18,"_verticalCenter":-97.097}],"_contentSize":{"__type__":"cc.Size","width":432,"height":125},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,-97.097,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Background","_parent":{"__id__":30},"_components":[{"__type__":"cc.Sprite","node":{"__id__":31},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"38yiy1R71Ej6XMbybSwCas"},"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":31},"alignMode":0,"_alignFlags":18,"_originalWidth":100,"_originalHeight":40}],"_contentSize":{"__type__":"cc.Size","width":432,"height":125},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"header","_parent":{"__id__":2},"_children":[{"__id__":33},{"__id__":34},{"__id__":35},{"__id__":36},{"__id__":38}],"_components":[{"__type__":"cc.Layout","node":{"__id__":32},"_layoutSize":{"__type__":"cc.Size","width":640,"height":150}},{"__type__":"cc.Widget","node":{"__id__":32},"_alignFlags":41,"_originalWidth":200}],"_contentSize":{"__type__":"cc.Size","width":640,"height":150},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,405,0,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"x1","_parent":{"__id__":32},"_components":[{"__type__":"cc.Sprite","node":{"__id__":33},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"4ale/Vi11B3rM6a0VyEPgx"},"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":33},"_alignFlags":17,"_top":29,"_verticalCenter":14,"_horizontalCenter":-192.495}],"_color":{"__type__":"cc.Color","r":41,"g":44,"b":132},"_contentSize":{"__type__":"cc.Size","width":64,"height":64},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-192.495,14,0,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"x2","_parent":{"__id__":32},"_components":[{"__type__":"cc.Sprite","node":{"__id__":34},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"4ale/Vi11B3rM6a0VyEPgx"},"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":34},"_alignFlags":17,"_top":29,"_verticalCenter":14,"_horizontalCenter":-122}],"_color":{"__type__":"cc.Color","r":41,"g":44,"b":132},"_contentSize":{"__type__":"cc.Size","width":64,"height":64},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-122,14,0,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"x3","_parent":{"__id__":32},"_components":[{"__type__":"cc.Sprite","node":{"__id__":35},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"4ale/Vi11B3rM6a0VyEPgx"},"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":35},"_alignFlags":17,"_top":29,"_verticalCenter":14,"_horizontalCenter":-50}],"_color":{"__type__":"cc.Color","r":41,"g":44,"b":132},"_contentSize":{"__type__":"cc.Size","width":64,"height":64},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-50,14,0,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"labelScore","_parent":{"__id__":32},"_components":[{"__id__":37},{"__type__":"cc.Widget","node":{"__id__":36},"_alignFlags":17,"_top":12.153000000000006,"_horizontalCenter":220}],"_contentSize":{"__type__":"cc.Size","width":400,"height":50.4},"_anchorPoint":{"__type__":"cc.Vec2","y":0.5},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[20,37.64699999999999,0,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Label","node":{"__id__":36},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_useOriginalSize":false,"_string":"SCORE: 40","_N$string":"SCORE: 40","_fontSize":50,"_lineHeight":50,"_N$file":{"__uuid__":"d6tC4ZM85MO4g2PheAR2bC"},"_isSystemFontUsed":false,"_N$verticalAlign":1,"_N$overflow":2},{"__type__":"cc.Node","_name":"labelCombo","_parent":{"__id__":32},"_components":[{"__id__":39},{"__type__":"cc.Widget","node":{"__id__":38},"_alignFlags":17,"_top":60.786,"_horizontalCenter":220}],"_contentSize":{"__type__":"cc.Size","width":400,"height":50.4},"_anchorPoint":{"__type__":"cc.Vec2","y":0.5},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[20,-10.986,0,0,0,0,1,1,1,1]},"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Label","node":{"__id__":38},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_useOriginalSize":false,"_string":"COMBO: 0","_N$string":"COMBO: 0","_fontSize":50,"_lineHeight":50,"_N$file":{"__uuid__":"d6tC4ZM85MO4g2PheAR2bC"},"_isSystemFontUsed":false,"_N$verticalAlign":1,"_N$overflow":2},{"__type__":"cc.Node","_name":"New Ambient Light","_parent":{"__id__":1},"_components":[{"__type__":"cc.Light","node":{"__id__":40},"_type":3,"_range":1,"_shadowMaxDepth":1000,"_shadowFrustumSize":50}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[320,480,0,0,0,0,1,1,1,1]},"_id":"6eq5qzislCGaduK03YTKtR"}],{"__type__":"cc.SpriteFrame","content":{"name":"BACKGROUND","texture":"2dwlfZaX5I441v63cny8nW","rect":[0,0,1080,1920],"offset":[0,0],"originalSize":[1080,1920],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"buttonplaynow","texture":"1ae990205","rect":[3,3,864,245],"offset":[0,0],"originalSize":[864,245],"rotated":1,"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_11","texture":"dbzhctM3FLMaS94BwAlSWl","rect":[20,49,24,15],"offset":[0,-24.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_49","texture":"b8tO2gX1BMUbt+i91PF7Wh","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_22","texture":"beWtT1jMxK3a95CmaK2Yiy","rect":[0,44,64,20],"offset":[0,-22],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"XGlow","texture":"1ae990205","rect":[254,3,307,307],"offset":[0,0],"originalSize":[363,363],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_09","texture":"0cAE0WWb5ETq8Z41qtsJO6","rect":[24,50,16,14],"offset":[0,-25],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_46","texture":"8a5ZgbcTFDBZBzEwcV6vjH","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},[{"__type__":"cc.Prefab","_name":"half_box","data":{"__id__":1}},{"__type__":"cc.Node","_name":"half_box","_children":[{"__id__":2},{"__id__":4}],"_components":[{"__type__":"77012rUI+pF5IrvGm5dX0sG","node":{"__id__":1},"halfBoxRight":{"__id__":4},"halfBoxLeft":{"__id__":2}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"5210nRJoJM6aiAujwbz38l"},"fileId":"8bOGI+6b1Po4icLEbtvDo8"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"halfbox","_parent":{"__id__":1},"_children":[{"__id__":3}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"5210nRJoJM6aiAujwbz38l"},"fileId":"a3Oei3Q/9E45iIElffPlPi"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,-0.7071067811865475,0.7071067811865476,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","z":-90},"_is3DNode":true},{"__type__":"cc.Node","_name":"Cube_1","_parent":{"__id__":2},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":3},"_materials":[{"__uuid__":"d4Q6dXtQBKsrKs8dwxepXF"}],"_mesh":{"__uuid__":"de1aHLxNhMKoyElCn3z+ZT"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"5210nRJoJM6aiAujwbz38l"},"fileId":"1f9OyKW4tD3KYUfa6fYn3R"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"halfboxr","_parent":{"__id__":1},"_children":[{"__id__":5}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"5210nRJoJM6aiAujwbz38l"},"fileId":"64eK3ZDMRBlrgApQDkn24P"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0.7071067811865475,0.7071067811865476,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","z":90},"_is3DNode":true},{"__type__":"cc.Node","_name":"Cube_1","_parent":{"__id__":4},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":5},"_materials":[{"__uuid__":"d4Q6dXtQBKsrKs8dwxepXF"}],"_mesh":{"__uuid__":"de1aHLxNhMKoyElCn3z+ZT"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"5210nRJoJM6aiAujwbz38l"},"fileId":"a9IDl8zjVOrayYMOaQ1voj"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true}],{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_60","texture":"e4Q2uxqOhEoLyd6B9+3Ali","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_50","texture":"cdGrHjmCJDYLmApbxn8bzF","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":3648},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":114}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":3648,"length":576}}],"_minPos":{"__type__":"cc.Vec3","x":-1.04999995231628,"y":-1.04999995231628,"z":-1.04999995231628},"_maxPos":{"__type__":"cc.Vec3","x":1.04999995231628,"y":1.04999995231628,"z":1.04999995231628}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_38","texture":"54vmFXYa5Gur/zYt7rt6Fc","rect":[0,6,64,58],"offset":[0,-3],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_57","texture":"75QXJDt8BP5YKZzybkZzse","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_10","texture":"ea1JVRT2BDOKM+0IjHNTHO","rect":[22,49,20,15],"offset":[0,-24.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_36","texture":"90/rKK4EtIsI3lLF48HcOx","rect":[0,12,64,52],"offset":[0,-6],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.EffectAsset","_name":"builtin-unlit-transparent","techniques":[{"stages":["transparent"],"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"program":"builtin-unlit-transparent|unlit-vs|unlit-fs","depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"diffuseTexture":{"value":"white","type":29},"diffuseColor":{"value":[1,1,1,1],"inspector":{"type":"color"},"type":16},"alphaThreshold":{"value":[0.5],"type":13},"mainTiling":{"value":[1,1],"type":14},"mainOffset":{"value":[0,0],"type":14}}}]}],"shaders":[{"hash":4105696851,"glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\n#if CC_USE_SKINNING\n\n  in vec4 a_weights;\n  in vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 cc_jointsTextureSize;\n    }\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform CC_JOINT_MATRIX {\n      mat4 cc_jointMatrices[50];\n    }\n\n    mat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n}\n\nin vec3 a_position;\n\n#if CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE\n  in mediump vec2 a_uv0;\n  out mediump vec2 v_uv0;\n#endif\n\n#if CC_USE_ATTRIBUTE_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n      v_color = a_color;\n  #endif\n\n  #if CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE\n      v_uv0 = a_uv0 * mainTiling + mainOffset;\n  #endif\n\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}\n","frag":"\nprecision highp float;\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n\n}\n\nvec4 TEXEL_TO_LINEAR (in vec4 color) {\n  #if INPUT_IS_GAMMA\n    return vec4(SRGBToLinear(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\nvec4 LINEAR_TO_OUTPUT_TEXEL (in vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    return vec4(LinearToSRGB(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nuniform DIFFUSE {\n  lowp vec4 diffuseColor;\n};\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_DIFFUSETEXTURE\n      diffuseTextureColor.a *= texture2D(diffuseTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 color, in vec2 uv) {\n  color *= diffuseColor;\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 color) {\n  color *= diffuseColor;\n}\n\n#if CC_USE_ATTRIBUTE_COLOR\n  in lowp vec4 v_color;\n#endif\n\n#if CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE\n  in mediump vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 color = vec4(1, 1, 1, 1);\n\n  #if CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE\n    CALC_DIFFUSE(color, v_uv0);\n  #else \n    CALC_DIFFUSE(color);\n  #endif\n\n  #if CC_USE_ATTRIBUTE_COLOR\n    color *= v_color;\n  #endif\n\n  ALPHA_TEST(color);\n\n  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( color );\n}\n"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matViewProj;\n\n#if CC_USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 cc_jointsTextureSize;\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 cc_jointMatrices[50];\nmat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\nattribute vec3 a_position;\n\n#if CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\n#if CC_USE_ATTRIBUTE_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n      v_color = a_color;\n  #endif\n\n  #if CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE\n      v_uv0 = a_uv0 * mainTiling + mainOffset;\n  #endif\n\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}\n","frag":"\nprecision highp float;\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n\n}\n\nvec4 TEXEL_TO_LINEAR (in vec4 color) {\n  #if INPUT_IS_GAMMA\n    return vec4(SRGBToLinear(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\nvec4 LINEAR_TO_OUTPUT_TEXEL (in vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    return vec4(LinearToSRGB(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nuniform lowp vec4 diffuseColor;\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_DIFFUSETEXTURE\n      diffuseTextureColor.a *= texture2D(diffuseTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 color, in vec2 uv) {\n  color *= diffuseColor;\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 color) {\n  color *= diffuseColor;\n}\n\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n\n#if CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE\n  varying mediump vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 color = vec4(1, 1, 1, 1);\n\n  #if CC_USE_ATTRIBUTE_UV0 && USE_DIFFUSE_TEXTURE\n    CALC_DIFFUSE(color, v_uv0);\n  #else \n    CALC_DIFFUSE(color);\n  #endif\n\n  #if CC_USE_ATTRIBUTE_COLOR\n    color *= v_color;\n  #endif\n\n  ALPHA_TEST(color);\n\n  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( color );\n}\n"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]},{"name":"CC_JOINT_MATRIX","defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"cc_jointsTexture","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_DIFFUSETEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","CC_USE_ATTRIBUTE_UV0"]}],"blocks":[{"name":"SKINNING","members":[{"name":"cc_jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"],"binding":0},{"name":"MAIN_TILING","members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[],"binding":1},{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":2},{"name":"DIFFUSE","members":[{"name":"diffuseColor","type":16,"count":1}],"defines":[],"binding":3}],"samplers":[{"name":"diffuseTexture","type":29,"count":1,"defines":["USE_DIFFUSE_TEXTURE"],"binding":30}],"dependencies":{},"name":"builtin-unlit-transparent|unlit-vs|unlit-fs"}]},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_25","texture":"64HAr13ipCbZUEEiEpp25C","rect":[0,41,64,23],"offset":[0,-20.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.AudioClip","_name":"Faded_AlanWalker_30s","_native":".mp3"},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_04","texture":"cdUWiIikdACYMLnJMNmL92","rect":[63,63,1,1],"offset":[31.5,-31.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_02","texture":"7dZ15PckZEF4jiSPxdQcsD","rect":[63,63,1,1],"offset":[31.5,-31.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_14","texture":"12875mfyVA9Yc+2nBmkuBv","rect":[14,48,36,16],"offset":[0,-24],"originalSize":[64,64],"capInsets":[0,0,0,0]}},[{"__type__":"cc.Prefab","_name":"rect_blue_glow","data":{"__id__":1}},{"__type__":"cc.Node","_name":"rect_blue_glow","_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":1},"_materials":[{"__uuid__":"e6KapciMFFe5pZ5EdSrXZ6"}],"_mesh":{"__uuid__":"a17y/JnFdBio9pa+2aeg5/"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"2bOVzgstxI34yqsZUE83t1"},"_contentSize":{"__type__":"cc.Size","width":1,"height":1},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,-284.978,-4120,0.7071067811865475,0,0,0.7071067811865476,146,146,146]},"_eulerAngles":{"__type__":"cc.Vec3","x":90},"_is3DNode":true}],{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_28","texture":"cfaQxF7NpFBrFad2rW+K74","rect":[0,31,64,33],"offset":[0,-15.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_43","texture":"03aj8BiFRA/pj5psBVbOp2","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_27","texture":"ebqS3OVMBHgI1ObqE77cYg","rect":[0,34,64,30],"offset":[0,-17],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_42","texture":"acWmvonF9E/bFaTBrQ5Brc","rect":[0,1,64,63],"offset":[0,-0.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_35","texture":"24iW9ZIfxF8adApGBc/I/K","rect":[0,15,64,49],"offset":[0,-7.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{"USE_ALPHA_TEST":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":4,"g":12,"b":109,"a":229}}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":3872},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":121}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":3872,"length":1200}}],"_minPos":{"__type__":"cc.Vec3","x":-5,"z":-5},"_maxPos":{"__type__":"cc.Vec3","x":5,"z":5}},{"__type__":"cc.Material","_name":"plane","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{},"_props":{"diffuseColor":{"__type__":"cc.Color","r":10,"g":14,"b":35}}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_03","texture":"aflWdksQhCnI7aVZKIixiC","rect":[63,63,1,1],"offset":[31.5,-31.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.EffectAsset","_name":"builtin-phong","techniques":[{"passes":[{"rasterizerState":{"cullMode":1029},"program":"builtin-phong|phong-vs|phong-fs","depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"alphaThreshold":{"value":[0.5],"type":13},"mainTiling":{"value":[1,1],"type":14},"mainOffset":{"value":[0,0],"type":14},"diffuseColor":{"value":[1,1,1,1],"inspector":{"type":"color"},"type":16},"diffuseTexture":{"value":"white","type":29},"specularColor":{"value":[1,1,1,1],"inspector":{"type":"color"},"type":16},"specularTexture":{"value":"white","type":29},"emissiveColor":{"value":[0,0,0,1],"inspector":{"type":"color"},"type":16},"emissiveTexture":{"value":"white","type":29},"glossiness":{"value":[10],"type":13},"normalTexture":{"value":"white","type":29}}}]},{"stages":["shadowcast"],"passes":[{"rasterizerState":{"cullMode":1029},"program":"builtin-phong|shadow-map-vs|shadow-map-fs","depthStencilState":{"depthTest":true,"depthWrite":true}}]}],"shaders":[{"hash":1292388708,"glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nstruct StandardAttributes {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\n\nin vec3 a_position;\n\n#if CC_USE_ATTRIBUTE_UV0\nin vec2 a_uv0;\n#endif\n\n#if CC_USE_ATTRIBUTE_COLOR\nin vec4 a_color;\n#endif\n\n#if CC_USE_ATTRIBUTE_NORMAL\nin vec3 a_normal;\n#endif\n\n#if CC_USE_ATTRIBUTE_TANGENT\nin vec4 a_tangent;\n#endif\n\nvoid CCAttribute (out StandardAttributes attr) {\n  attr.position = vec4(a_position, 1.0);\n\n  #if CC_USE_ATTRIBUTE_UV0\n    attr.uv = a_uv0;\n  #else\n    attr.uv = vec2(0.0);\n  #endif\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n    attr.color = a_color;\n  #else\n    attr.color = vec4(1.0);\n  #endif\n  \n  #if CC_USE_ATTRIBUTE_NORMAL\n    attr.normal = a_normal;\n  #else\n    attr.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n\n  #if CC_USE_ATTRIBUTE_TANGENT\n    attr.tangent = a_tangent;\n  #else\n    attr.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\n\n#if CC_USE_SKINNING\n\n#if CC_USE_SKINNING\n\n  in vec4 a_weights;\n  in vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 cc_jointsTextureSize;\n    }\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform CC_JOINT_MATRIX {\n      mat4 cc_jointMatrices[50];\n    }\n\n    mat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\n  void CCSkin(inout StandardAttributes attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0)).xyz;\n    attr.tangent = m * attr.tangent;\n  }\n#endif\n\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\n\nvoid CCAttrToInput (in StandardAttributes attr, out StandardVertInput In) {\n  In.position = attr.position;\n  In.normal = attr.normal;\n  In.tangent = attr.tangent;\n  In.uv = attr.uv;\n  In.color = attr.color;\n}\n\nvoid CCVertInput (out StandardVertInput In) {\n  StandardAttributes attr;\n  CCAttribute(attr);\n  #if CC_USE_SKINNING\n    CCSkin(attr);\n  #endif\n  CCAttrToInput(attr, In);\n}\n\n#if CC_USE_SHADOW_MAP \n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n\n  };\n  uniform sampler2D cc_shadow_map[2];\n\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n\n#if 1\n\n  void CLAC_SHADOW (vec3 worldPos) {\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n      v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n      v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n    }\n    #endif\n  }\n\n#else\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n\n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    float frustumEdgeFalloff = 0.0;\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n        shadow *= computeShadowESM(cc_shadow_map[i], v_posLightSpace[i], v_depth[i], cc_shadow_info[i].z, cc_shadow_info[i].w, frustumEdgeFalloff);\n    }\n    #endif\n    return shadow;\n  }\n\n#endif\n\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n}\n\nout mediump vec2 v_uv0;\nout lowp vec4 v_color;\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\n\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n\n  vec4 position = In.position;\n  vec4 normal = vec4(In.normal, 0);\n\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_worldNormal = (cc_matWorldIT * normal).xyz;\n  v_color = In.color;\n  v_uv0 = In.uv * mainTiling + mainOffset;\n\n  CLAC_SHADOW(v_worldPos);\n  \n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}\n","frag":"\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n\n}\n\nvec4 TEXEL_TO_LINEAR (in vec4 color) {\n  #if INPUT_IS_GAMMA\n    return vec4(SRGBToLinear(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\nvec4 LINEAR_TO_OUTPUT_TEXEL (in vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    return vec4(LinearToSRGB(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nmat4 transposeMat4(in mat4 mat) {\n    vec4 i0 = mat[0];\n    vec4 i1 = mat[1];\n    vec4 i2 = mat[2];\n    vec4 i3 = mat[3];\n    return mat4(vec4(i0.x, i1.x, i2.x, i3.x),\n                vec4(i0.y, i1.y, i2.y, i3.y),\n                vec4(i0.z, i1.z, i2.z, i3.z),\n                vec4(i0.w, i1.w, i2.w, i3.w));\n}\n\n#if USE_NORMAL_TEXTURE\n\n  uniform sampler2D normalTexture;\n\n#endif\n\nvoid CALC_NORMAL (inout vec3 normal, in vec3 worldPos, in vec2 uv) {\n  #if USE_NORMAL_TEXTURE\n\n  #endif\n}\n\nuniform DIFFUSE {\n  lowp vec4 diffuseColor;\n};\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_DIFFUSETEXTURE\n      diffuseTextureColor.a *= texture2D(diffuseTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 color, in vec2 uv) {\n  color *= diffuseColor;\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 color) {\n  color *= diffuseColor;\n}\n\n#if USE_SPECULAR\n  uniform SPECULAR {\n    lowp vec4 specularColor;\n  };\n\n  #if USE_SPECULAR_TEXTURE\n    uniform sampler2D specularTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_SPECULAR_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_SPECULAR_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 specularTextureColor = texture2D(specularTexture, uv);\n    specularTextureColor = TEXEL_TO_LINEAR(specularTextureColor);\n    color *= specularTextureColor.rgb;\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular, in vec2 uv) {\n  #if USE_SPECULAR\n    specular = specularColor.xyz;\n    MULTIPLY_SPECULAR_TEXTRUE_COLOR(specular, uv);\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular) {\n  #if USE_SPECULAR\n    specular = specularColor.xyz;\n  #endif\n}\n\n#if USE_EMISSIVE\n  uniform EMISSIVE {\n    lowp vec4 emissiveColor;\n  };\n\n  #if USE_EMISSIVE_TEXTURE\n    uniform sampler2D emissiveTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_EMISSIVE_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_EMISSIVE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 emissiveTextureColor = texture2D(emissiveTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_EMISSIVETEXTURE\n      emissiveTextureColor.a *= texture2D(emissiveTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    emissiveTextureColor = TEXEL_TO_LINEAR(emissiveTextureColor);\n    color *= emissiveTextureColor.rgb;\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive, in vec2 uv) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor.xyz;\n    MULTIPLY_EMISSIVE_TEXTRUE_COLOR(emissive, uv);\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor.xyz;\n  #endif\n}\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nin mediump vec2 v_uv0;\nin lowp vec4 v_color;\n\n#if CC_NUM_DIR_LIGHTS > 0 || CC_NUM_POINT_LIGHTS > 0 || CC_NUM_SPOT_LIGHTS > 0 || CC_NUM_AMBIENT_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_dirLightDirection[4];\n\n  vec4 cc_dirLightColor[4];\n\n  vec4 cc_pointLightPositionAndRange[4];\n\n  vec4 cc_pointLightColor[4];\n\n  vec4 cc_spotLightPositionAndRange[4];\n\n  vec4 cc_spotLightDirection[4];\n\n  vec4 cc_spotLightColor[4];\n\n  vec4 cc_ambientColor[4];\n\n};\n\n#endif\n\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n};\n\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  return ret;\n}\n\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  \n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  return ret;\n}\n\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  \n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  return ret;\n}\n\n#if CC_USE_SHADOW_MAP \n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n\n  };\n  uniform sampler2D cc_shadow_map[2];\n\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n\n#if 0\n\n  void CLAC_SHADOW (vec3 worldPos) {\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n      v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n      v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n    }\n    #endif\n  }\n\n#else\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n\n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    float frustumEdgeFalloff = 0.0;\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n        shadow *= computeShadowESM(cc_shadow_map[i], v_posLightSpace[i], v_depth[i], cc_shadow_info[i].z, cc_shadow_info[i].w, frustumEdgeFalloff);\n    }\n    #endif\n    return shadow;\n  }\n\n#endif\n\nuniform PHONG {\n  float glossiness;\n}\n\nstruct PhongMaterial {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n};\n\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\n\nvoid brdf (inout Lighting result, LightInfo info, vec3 normal, vec3 viewDirection, float glossiness) {\n  float ndh = 0.0;\n\n  vec3 halfDir = normalize(viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, glossiness * 128.0));\n\n  vec3 diffuse = info.radiance * max(0.0, dot(normal, info.lightDir));\n  vec3 specular = info.radiance * NdotH;\n\n  result.diffuse += diffuse;\n  result.specular += specular;\n}\n\nLighting getPhongLighting (vec3 normal, vec3 worldPos, vec3 viewDirection, float glossiness) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n\n  #if CC_NUM_DIR_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_DIR_LIGHTS; i++) {\n      LightInfo info = computeDirectionalLighting(cc_dirLightDirection[i], cc_dirLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_POINT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_POINT_LIGHTS; i++) {\n      LightInfo info = computePointLighting(worldPos, cc_pointLightPositionAndRange[i], cc_pointLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_SPOT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_SPOT_LIGHTS; i++) {\n      LightInfo info = computeSpotLighting(worldPos, cc_spotLightPositionAndRange[i], cc_spotLightDirection[i], cc_spotLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_AMBIENT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_AMBIENT_LIGHTS; i++) {\n      result.diffuse += cc_ambientColor[i].rgb;\n    }\n  #endif\n\n  return result;\n}\n\nvec4 composePhongShading (Lighting lighting, PhongMaterial mtl) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n\n  o.rgb = lighting.diffuse * mtl.diffuse;\n  \n  #if USE_EMISSIVE\n    o.rgb += mtl.emissive;\n  #endif\n\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * mtl.specular;\n  #endif\n  \n  #if CC_USE_SHADOW_MAP\n    o.rgb *= computeShadow();\n  #endif\n\n  o.a = mtl.opacity;\n\n  return o;\n}\n\nvoid CALC_PHONG_LIGHTING (inout vec4 outColor, in PhongMaterial material, in vec3 normal, in vec3 worldPosition, in vec3 viewDirection) {\n  Lighting phongLighting = getPhongLighting(normal, worldPosition, viewDirection, glossiness);\n  outColor = composePhongShading(phongLighting, material);\n}\n\nvoid main () {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n\n  #if USE_DIFFUSE_TEXTURE\n    CALC_DIFFUSE(diffuse, v_uv0);\n  #else\n    CALC_DIFFUSE(diffuse);\n  #endif\n\n  ALPHA_TEST(diffuse);\n\n  PhongMaterial material;\n  material.diffuse = diffuse.rgb;\n  material.opacity = diffuse.a;\n\n  #if USE_EMISSIVE_TEXTURE\n    CALC_EMISSIVE(material.emissive, v_uv0);\n  #else\n    CALC_EMISSIVE(material.emissive);\n  #endif\n\n  #if USE_SPECULAR_TEXTURE\n    CALC_SPECULAR(material.specular, v_uv0);\n  #else\n    CALC_SPECULAR(material.specular);\n  #endif\n\n  vec3 viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  vec4 phongColor;\n\n  vec3 normal = normalize(v_worldNormal);\n  #if USE_NORMAL_TEXTURE\n    CALC_NORMAL(normal, v_worldPos, v_uv0);\n  #endif\n\n  CALC_PHONG_LIGHTING(phongColor, material, normal, v_worldPos, viewDirection);\n\n  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( phongColor );\n}\n"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matWorldIT;\nuniform mat4 cc_matViewProj;\n\nstruct StandardAttributes {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\n\nattribute vec3 a_position;\n\n#if CC_USE_ATTRIBUTE_UV0\nattribute vec2 a_uv0;\n#endif\n\n#if CC_USE_ATTRIBUTE_COLOR\nattribute vec4 a_color;\n#endif\n\n#if CC_USE_ATTRIBUTE_NORMAL\nattribute vec3 a_normal;\n#endif\n\n#if CC_USE_ATTRIBUTE_TANGENT\nattribute vec4 a_tangent;\n#endif\n\nvoid CCAttribute (out StandardAttributes attr) {\n  attr.position = vec4(a_position, 1.0);\n\n  #if CC_USE_ATTRIBUTE_UV0\n    attr.uv = a_uv0;\n  #else\n    attr.uv = vec2(0.0);\n  #endif\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n    attr.color = a_color;\n  #else\n    attr.color = vec4(1.0);\n  #endif\n  \n  #if CC_USE_ATTRIBUTE_NORMAL\n    attr.normal = a_normal;\n  #else\n    attr.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n\n  #if CC_USE_ATTRIBUTE_TANGENT\n    attr.tangent = a_tangent;\n  #else\n    attr.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\n\n#if CC_USE_SKINNING\n\n#if CC_USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 cc_jointsTextureSize;\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 cc_jointMatrices[50];\nmat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\n  void CCSkin(inout StandardAttributes attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0)).xyz;\n    attr.tangent = m * attr.tangent;\n  }\n#endif\n\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\n\nvoid CCAttrToInput (in StandardAttributes attr, out StandardVertInput In) {\n  In.position = attr.position;\n  In.normal = attr.normal;\n  In.tangent = attr.tangent;\n  In.uv = attr.uv;\n  In.color = attr.color;\n}\n\nvoid CCVertInput (out StandardVertInput In) {\n  StandardAttributes attr;\n  CCAttribute(attr);\n  #if CC_USE_SKINNING\n    CCSkin(attr);\n  #endif\n  CCAttrToInput(attr, In);\n}\n\n#if CC_USE_SHADOW_MAP \n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  uniform sampler2D cc_shadow_map[2];\n\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n\n#if 1\n\n  void CLAC_SHADOW (vec3 worldPos) {\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n      v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n      v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n    }\n    #endif\n  }\n\n#else\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n\n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    float frustumEdgeFalloff = 0.0;\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n        shadow *= computeShadowESM(cc_shadow_map[i], v_posLightSpace[i], v_depth[i], cc_shadow_info[i].z, cc_shadow_info[i].w, frustumEdgeFalloff);\n    }\n    #endif\n    return shadow;\n  }\n\n#endif\n\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\n\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n\n  vec4 position = In.position;\n  vec4 normal = vec4(In.normal, 0);\n\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_worldNormal = (cc_matWorldIT * normal).xyz;\n  v_color = In.color;\n  v_uv0 = In.uv * mainTiling + mainOffset;\n\n  CLAC_SHADOW(v_worldPos);\n  \n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}\n","frag":"\nprecision highp float;\nuniform vec4 cc_cameraPos;\n\nvec3 SRGBToLinear(vec3 gamma)\n{\n\treturn pow(gamma, vec3(2.2));\n\n}\n\nvec3 LinearToSRGB(vec3 linear)\n{\n\treturn pow(linear, vec3(0.454545));\n\n}\n\nvec4 TEXEL_TO_LINEAR (in vec4 color) {\n  #if INPUT_IS_GAMMA\n    return vec4(SRGBToLinear(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\nvec4 LINEAR_TO_OUTPUT_TEXEL (in vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    return vec4(LinearToSRGB(color.rgb), color.a);\n  #else\n    return color;\n  #endif\n}\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nmat4 transposeMat4(in mat4 mat) {\n    vec4 i0 = mat[0];\n    vec4 i1 = mat[1];\n    vec4 i2 = mat[2];\n    vec4 i3 = mat[3];\n    return mat4(vec4(i0.x, i1.x, i2.x, i3.x),\n                vec4(i0.y, i1.y, i2.y, i3.y),\n                vec4(i0.z, i1.z, i2.z, i3.z),\n                vec4(i0.w, i1.w, i2.w, i3.w));\n}\n\n#if USE_NORMAL_TEXTURE\n\n  uniform sampler2D normalTexture;\n\n#endif\n\nvoid CALC_NORMAL (inout vec3 normal, in vec3 worldPos, in vec2 uv) {\n  #if USE_NORMAL_TEXTURE\n\n  #endif\n}\n\nuniform lowp vec4 diffuseColor;\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_DIFFUSETEXTURE\n      diffuseTextureColor.a *= texture2D(diffuseTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 color, in vec2 uv) {\n  color *= diffuseColor;\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 color) {\n  color *= diffuseColor;\n}\n\n#if USE_SPECULAR\n  uniform lowp vec4 specularColor;\n\n  #if USE_SPECULAR_TEXTURE\n    uniform sampler2D specularTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_SPECULAR_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_SPECULAR_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 specularTextureColor = texture2D(specularTexture, uv);\n    specularTextureColor = TEXEL_TO_LINEAR(specularTextureColor);\n    color *= specularTextureColor.rgb;\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular, in vec2 uv) {\n  #if USE_SPECULAR\n    specular = specularColor.xyz;\n    MULTIPLY_SPECULAR_TEXTRUE_COLOR(specular, uv);\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular) {\n  #if USE_SPECULAR\n    specular = specularColor.xyz;\n  #endif\n}\n\n#if USE_EMISSIVE\n  uniform lowp vec4 emissiveColor;\n\n  #if USE_EMISSIVE_TEXTURE\n    uniform sampler2D emissiveTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_EMISSIVE_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_EMISSIVE_TEXTURE && CC_USE_ATTRIBUTE_UV0\n    vec4 emissiveTextureColor = texture2D(emissiveTexture, uv);\n    #if CC_USE_ALPHA_ATLAS_EMISSIVETEXTURE\n      emissiveTextureColor.a *= texture2D(emissiveTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    emissiveTextureColor = TEXEL_TO_LINEAR(emissiveTextureColor);\n    color *= emissiveTextureColor.rgb;\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive, in vec2 uv) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor.xyz;\n    MULTIPLY_EMISSIVE_TEXTRUE_COLOR(emissive, uv);\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor.xyz;\n  #endif\n}\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\n\n#if CC_NUM_DIR_LIGHTS > 0 || CC_NUM_POINT_LIGHTS > 0 || CC_NUM_SPOT_LIGHTS > 0 || CC_NUM_AMBIENT_LIGHTS > 0\nuniform vec4 cc_dirLightDirection[4];\nuniform vec4 cc_dirLightColor[4];\nuniform vec4 cc_pointLightPositionAndRange[4];\nuniform vec4 cc_pointLightColor[4];\nuniform vec4 cc_spotLightPositionAndRange[4];\nuniform vec4 cc_spotLightDirection[4];\nuniform vec4 cc_spotLightColor[4];\nuniform vec4 cc_ambientColor[4];\n\n#endif\n\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n};\n\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  return ret;\n}\n\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  \n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  return ret;\n}\n\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  \n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  return ret;\n}\n\n#if CC_USE_SHADOW_MAP \n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  uniform sampler2D cc_shadow_map[2];\n\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\n\n#if 0\n\n  void CLAC_SHADOW (vec3 worldPos) {\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n      v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n      v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n    }\n    #endif\n  }\n\n#else\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n\n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    float frustumEdgeFalloff = 0.0;\n    #if CC_USE_SHADOW_MAP\n    for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n        shadow *= computeShadowESM(cc_shadow_map[i], v_posLightSpace[i], v_depth[i], cc_shadow_info[i].z, cc_shadow_info[i].w, frustumEdgeFalloff);\n    }\n    #endif\n    return shadow;\n  }\n\n#endif\n\nuniform float glossiness;\nstruct PhongMaterial {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n};\n\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\n\nvoid brdf (inout Lighting result, LightInfo info, vec3 normal, vec3 viewDirection, float glossiness) {\n  float ndh = 0.0;\n\n  vec3 halfDir = normalize(viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, glossiness * 128.0));\n\n  vec3 diffuse = info.radiance * max(0.0, dot(normal, info.lightDir));\n  vec3 specular = info.radiance * NdotH;\n\n  result.diffuse += diffuse;\n  result.specular += specular;\n}\n\nLighting getPhongLighting (vec3 normal, vec3 worldPos, vec3 viewDirection, float glossiness) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n\n  #if CC_NUM_DIR_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_DIR_LIGHTS; i++) {\n      LightInfo info = computeDirectionalLighting(cc_dirLightDirection[i], cc_dirLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_POINT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_POINT_LIGHTS; i++) {\n      LightInfo info = computePointLighting(worldPos, cc_pointLightPositionAndRange[i], cc_pointLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_SPOT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_SPOT_LIGHTS; i++) {\n      LightInfo info = computeSpotLighting(worldPos, cc_spotLightPositionAndRange[i], cc_spotLightDirection[i], cc_spotLightColor[i]);\n      brdf(result, info, normal, viewDirection, glossiness);\n    }\n  #endif\n\n  #if CC_NUM_AMBIENT_LIGHTS > 0\n    for (int i = 0; i < CC_NUM_AMBIENT_LIGHTS; i++) {\n      result.diffuse += cc_ambientColor[i].rgb;\n    }\n  #endif\n\n  return result;\n}\n\nvec4 composePhongShading (Lighting lighting, PhongMaterial mtl) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n\n  o.rgb = lighting.diffuse * mtl.diffuse;\n  \n  #if USE_EMISSIVE\n    o.rgb += mtl.emissive;\n  #endif\n\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * mtl.specular;\n  #endif\n  \n  #if CC_USE_SHADOW_MAP\n    o.rgb *= computeShadow();\n  #endif\n\n  o.a = mtl.opacity;\n\n  return o;\n}\n\nvoid CALC_PHONG_LIGHTING (inout vec4 outColor, in PhongMaterial material, in vec3 normal, in vec3 worldPosition, in vec3 viewDirection) {\n  Lighting phongLighting = getPhongLighting(normal, worldPosition, viewDirection, glossiness);\n  outColor = composePhongShading(phongLighting, material);\n}\n\nvoid main () {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  \n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n\n  #if USE_DIFFUSE_TEXTURE\n    CALC_DIFFUSE(diffuse, v_uv0);\n  #else\n    CALC_DIFFUSE(diffuse);\n  #endif\n\n  ALPHA_TEST(diffuse);\n\n  PhongMaterial material;\n  material.diffuse = diffuse.rgb;\n  material.opacity = diffuse.a;\n\n  #if USE_EMISSIVE_TEXTURE\n    CALC_EMISSIVE(material.emissive, v_uv0);\n  #else\n    CALC_EMISSIVE(material.emissive);\n  #endif\n\n  #if USE_SPECULAR_TEXTURE\n    CALC_SPECULAR(material.specular, v_uv0);\n  #else\n    CALC_SPECULAR(material.specular);\n  #endif\n\n  vec3 viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  vec4 phongColor;\n\n  vec3 normal = normalize(v_worldNormal);\n  #if USE_NORMAL_TEXTURE\n    CALC_NORMAL(normal, v_worldPos, v_uv0);\n  #endif\n\n  CALC_PHONG_LIGHTING(phongColor, material, normal, v_worldPos, viewDirection);\n\n  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( phongColor );\n}\n"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CC_SHADOW","defines":["CC_USE_SHADOW_MAP"]},{"name":"CCLIGHTS","defines":[]}],"samplers":[{"name":"cc_shadow_map","defines":["CC_USE_SHADOW_MAP"]}]},"locals":{"blocks":[{"name":"CCLocal","defines":[]},{"name":"CC_JOINT_MATRIX","defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"cc_jointsTexture","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}},"defines":[{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_TANGENT","type":"boolean","defines":[]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_DIFFUSETEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","CC_USE_ATTRIBUTE_UV0"]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_EMISSIVETEXTURE","type":"boolean","defines":["USE_EMISSIVE_TEXTURE","CC_USE_ATTRIBUTE_UV0"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_NUM_DIR_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_NUM_POINT_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_NUM_SPOT_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_NUM_AMBIENT_LIGHTS","type":"number","defines":[],"range":[0,3]}],"blocks":[{"name":"SKINNING","members":[{"name":"cc_jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"],"binding":0},{"name":"MAIN_TILING","members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[],"binding":1},{"name":"DIFFUSE","members":[{"name":"diffuseColor","type":16,"count":1}],"defines":[],"binding":2},{"name":"SPECULAR","members":[{"name":"specularColor","type":16,"count":1}],"defines":["USE_SPECULAR"],"binding":3},{"name":"EMISSIVE","members":[{"name":"emissiveColor","type":16,"count":1}],"defines":["USE_EMISSIVE"],"binding":4},{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":5},{"name":"PHONG","members":[{"name":"glossiness","type":13,"count":1}],"defines":[],"binding":6}],"samplers":[{"name":"normalTexture","type":29,"count":1,"defines":["USE_NORMAL_TEXTURE"],"binding":30},{"name":"diffuseTexture","type":29,"count":1,"defines":["USE_DIFFUSE_TEXTURE"],"binding":31},{"name":"specularTexture","type":29,"count":1,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"],"binding":32},{"name":"emissiveTexture","type":29,"count":1,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"],"binding":33}],"dependencies":{},"name":"builtin-phong|phong-vs|phong-fs"},{"hash":1437876711,"glsl3":{"vert":"\nprecision highp float;\n\nin vec3 a_position;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CC_SHADOW_MAP {\n  mat4  cc_shadow_map_lightViewProjMatrix;\n  vec4  cc_shadow_map_info;\n\n  float cc_shadow_map_bias;\n};\n\nout float v_depth;\n\n#if CC_USE_SKINNING\n\n  in vec4 a_weights;\n  in vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 cc_jointsTextureSize;\n    }\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform CC_JOINT_MATRIX {\n      mat4 cc_jointMatrices[50];\n    }\n\n    mat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}\n","frag":"\nprecision highp float;\n\nin float v_depth;\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\nvoid main () {\n\n  gl_FragColor = packDepthToRGBA(v_depth);\n\n}\n"},"glsl1":{"vert":"\nprecision highp float;\n\nattribute vec3 a_position;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_shadow_map_lightViewProjMatrix;\nuniform vec4 cc_shadow_map_info;\nuniform float cc_shadow_map_bias;\n\nvarying float v_depth;\n\n#if CC_USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 cc_jointsTextureSize;\n    uniform sampler2D cc_jointsTexture;\n\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(cc_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(cc_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = cc_jointsTextureSize.x;\n        float height = cc_jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 cc_jointMatrices[50];\nmat4 getBoneMatrix(const in float i) {\n      return cc_jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}\n","frag":"\nprecision highp float;\n\nvarying float v_depth;\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\nvoid main () {\n\n  gl_FragColor = packDepthToRGBA(v_depth);\n\n}\n"},"builtins":{"globals":{"blocks":[{"name":"CC_SHADOW_MAP","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]},{"name":"CC_JOINT_MATRIX","defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"cc_jointsTexture","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}],"blocks":[{"name":"SKINNING","members":[{"name":"cc_jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"],"binding":0}],"samplers":[],"dependencies":{},"name":"builtin-phong|shadow-map-vs|shadow-map-fs"}]},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_0","texture":"8aGMScBzpEcozQ16yKqnEc","rect":[63,63,1,1],"offset":[31.5,-31.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_29","texture":"43xKj4ZARBlJYqkOjR8Y+v","rect":[0,28,64,36],"offset":[0,-14],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_06","texture":"70BvH3pU5GN4EHpZHFMNaU","rect":[26,51,12,12],"offset":[0,-25],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_59","texture":"592BiuJlhNgpkw3vgtHNdY","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_52","texture":"8akQhZlZZGSqUWppedOBUu","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_26","texture":"c8Ntyr/VdFboFJaL+1sFeW","rect":[0,38,64,26],"offset":[0,-19],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.AnimationClip","_name":"box","_duration":1.9583333333333333,"sample":24,"curveData":{"comps":{"cc.Sprite":{"spriteFrame":[{"frame":0,"value":{"__uuid__":"afvHpmEa1IcZX6R3Tvdw3u"}},{"frame":0.041666666666666664,"value":{"__uuid__":"afvHpmEa1IcZX6R3Tvdw3u"}},{"frame":0.08333333333333333,"value":{"__uuid__":"f1tmoJJqBHfr/HtNyn9R2h"}},{"frame":0.125,"value":{"__uuid__":"86ulYD9qFLDL+KebVbIh4X"}},{"frame":0.16666666666666666,"value":{"__uuid__":"aavpjdxcVIvrWXJSnyuFhv"}},{"frame":0.20833333333333334,"value":{"__uuid__":"84RF/UIGNNmZrrC+efaRvz"}},{"frame":0.25,"value":{"__uuid__":"223N3kDq9P34BOBz0NWfms"}},{"frame":0.2916666666666667,"value":{"__uuid__":"b19TjtqRZKNojVLQ1CXEI1"}},{"frame":0.3333333333333333,"value":{"__uuid__":"4dAKU9zzVBtLfFIfa3MnGD"}},{"frame":0.375,"value":{"__uuid__":"78s23HIEhNVYFG/9F47XPW"}},{"frame":0.4166666666666667,"value":{"__uuid__":"3dxpLJM3pDgbWuE3ZPYQ6A"}},{"frame":0.4583333333333333,"value":{"__uuid__":"ca8peYiPVCVLoqHbhKGvYN"}},{"frame":0.5,"value":{"__uuid__":"2cLJMOayhChJrJQRZa04s+"}},{"frame":0.5416666666666666,"value":{"__uuid__":"87DX699YdFa4yiT+XqauyC"}},{"frame":0.5833333333333334,"value":{"__uuid__":"e7Re6HEaxMaInnGTeGB0Ip"}},{"frame":0.625,"value":{"__uuid__":"ecrP9sgDdH0b3yfTM62vU9"}},{"frame":0.6666666666666666,"value":{"__uuid__":"d2H+dXGwROj7sEttI1wJUg"}},{"frame":0.7083333333333334,"value":{"__uuid__":"d6ApIdsBhPYJFCzuWj33DZ"}},{"frame":0.75,"value":{"__uuid__":"04nd1CQyVFLq/FX8hdHWuF"}},{"frame":0.7916666666666666,"value":{"__uuid__":"47ypaQ0HhK0oeIj5Zwa8BF"}},{"frame":0.8333333333333334,"value":{"__uuid__":"82tzg4YbtO2JhTZyqla2OC"}},{"frame":0.875,"value":{"__uuid__":"b8R+eJNp1H1r2Ltto2+RYX"}},{"frame":0.9166666666666666,"value":{"__uuid__":"94Hsu5vBxMiqjCL4dqGP6E"}},{"frame":0.9583333333333334,"value":{"__uuid__":"90DkKF+BRGD4GLb8zlJLsj"}},{"frame":1,"value":{"__uuid__":"b1BWrZWMZI5o5Upt3zQiEu"}},{"frame":1.0416666666666667,"value":{"__uuid__":"09J7R+p6NOCaNQVB+cEM8i"}},{"frame":1.0833333333333333,"value":{"__uuid__":"229mZBrnVGsJqctuIsPxnl"}},{"frame":1.125,"value":{"__uuid__":"2ekO7QGLFHJIY2y6GCFkMX"}},{"frame":1.1666666666666667,"value":{"__uuid__":"9aMq+y545ATa9guJ8Laev7"}},{"frame":1.2083333333333333,"value":{"__uuid__":"79p9TnLldAvpWHsuh3/n1h"}},{"frame":1.25,"value":{"__uuid__":"dbSLh9HItEfbRK4mETqveK"}},{"frame":1.2916666666666667,"value":{"__uuid__":"76lpKfo+5K6ppaXaM5ameH"}},{"frame":1.3333333333333333,"value":{"__uuid__":"27G17udCxATbWOGAI4v+3r"}},{"frame":1.375,"value":{"__uuid__":"96S2iK+yFMwIw8KqSxpg2W"}},{"frame":1.4166666666666667,"value":{"__uuid__":"93qcm9BEJHII7djQ+gWBYC"}},{"frame":1.4583333333333333,"value":{"__uuid__":"f3gJZAiBdJVYSiMgTS648+"}},{"frame":1.5,"value":{"__uuid__":"ecoIDdS41O2peSC9SHcB1A"}},{"frame":1.5416666666666667,"value":{"__uuid__":"51KHfd741BBpv4qatdLz/K"}},{"frame":1.5833333333333333,"value":{"__uuid__":"42tX1CHJFNpZ7aUMUAsDGb"}},{"frame":1.625,"value":{"__uuid__":"64/KsyQK5Moa1l+X0C//wo"}},{"frame":1.6666666666666667,"value":{"__uuid__":"e3FU1xEEBM+Z3dV0IcAfbI"}},{"frame":1.7083333333333333,"value":{"__uuid__":"b4kOufURVHMJeNHD9s84Hi"}},{"frame":1.75,"value":{"__uuid__":"2aft45eZxL2qpnFk4fxdp9"}},{"frame":1.7916666666666667,"value":{"__uuid__":"e9Ux6DozBO1IPwe/LevFP1"}},{"frame":1.8333333333333333,"value":{"__uuid__":"76uoa49PRIUIf0Yhm098a+"}},{"frame":1.875,"value":{"__uuid__":"16zgCj2+9LXqqJCy/r4g74"}},{"frame":1.9166666666666667,"value":{"__uuid__":"b3aLzI3lBOWo/Peel6msii"}}]}}}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_12","texture":"91mtI9KjBNr51u9gAw5Yhk","rect":[18,49,28,15],"offset":[0,-24.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_19","texture":"dfNNDMD0FDJpAFSaTLWLWn","rect":[6,48,52,16],"offset":[0,-24],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.Material","_name":"arrow_box","_effectAsset":{"__uuid__":"abwstieFJFJakN1HRIe4jy"},"_defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":false},"_props":{"alphaThreshold":1,"diffuseTexture":{"__uuid__":"45hlVb/5ZGm6fjCHb6ymXZ"}}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_20","texture":"66CaPuTJlGNJ/3mInpO971","rect":[3,48,58,16],"offset":[0,-24],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.TTFFont","_name":"Teko-Bold","_native":"Teko-Bold.ttf"},[{"__type__":"cc.Prefab","_name":"box","data":{"__id__":1}},{"__type__":"cc.Node","_name":"box","_children":[{"__id__":2},{"__id__":3}],"_components":[{"__type__":"86f4ecRY1tNUJIeguS5O4W0","node":{"__id__":1}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"d89Dp47w9PL7U10b7MihmD"},"fileId":"4ccj6T8jZE/ZsPs0A/thLY"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,106.254,-1400,0,0,0,1,1,1,1]},"_is3DNode":true},{"__type__":"cc.Node","_name":"Cube_2","_parent":{"__id__":1},"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":2},"_materials":[{"__uuid__":"d4Q6dXtQBKsrKs8dwxepXF"}],"_mesh":{"__uuid__":"0fiupMiupCoZZ3WV7vu+2h"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"d89Dp47w9PL7U10b7MihmD"},"fileId":"a3qfTG6EdMYIon8PYCd9/a"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,-0.7071067811865475,0.7071067811865476,100,100,100]},"_eulerAngles":{"__type__":"cc.Vec3","z":-90},"_is3DNode":true},{"__type__":"cc.Node","_name":"frontbox","_parent":{"__id__":1},"_components":[{"__type__":"cc.Sprite","node":{"__id__":3},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"57C8B5fgVArYNAI6kBiBx0"},"_sizeMode":0,"_isTrimmedMode":false},{"__type__":"cc.Animation","node":{"__id__":3},"_defaultClip":{"__uuid__":"b9kUX+YRFJbKDNFsP8cNfF"},"_clips":[{"__uuid__":"b9kUX+YRFJbKDNFsP8cNfF"}],"playOnLoad":true}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"d89Dp47w9PL7U10b7MihmD"},"fileId":"dbep7yQ8xK6YDF7gdpF6ZN"},"_contentSize":{"__type__":"cc.Size","width":128,"height":128},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,-20.601,0,0,0,0,1,2,2,2]},"_is3DNode":true}],{"__type__":"cc.Material","_name":"ExplosionFlare","_effectAsset":{"__uuid__":"796vrvt+9F2Zw/WR3INvx6"},"_defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":236,"g":219,"b":219},"alphaThreshold":0.001,"diffuseTexture":{"__uuid__":"8ayqfc5LdJo5AUwt70lII2"}}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_37","texture":"b4AtP9ZF1Pmp/snJhADgsW","rect":[0,9,64,55],"offset":[0,-4.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":2496},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":78}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":2496,"length":456}}],"_minPos":{"__type__":"cc.Vec3","x":-1,"y":-1,"z":-1},"_maxPos":{"__type__":"cc.Vec3","x":1,"z":1}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_51","texture":"97vcC0R+ZMbLIUBUuCdLlK","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.Material","_name":"rect_blue_glow","_effectAsset":{"__uuid__":"796vrvt+9F2Zw/WR3INvx6"},"_defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":false},"_props":{"diffuseColor":{"__type__":"cc.Color","g":102,"b":255},"alphaThreshold":0.5,"diffuseTexture":{"__uuid__":"17ug+JUbZJ0oens+RGObfL"}}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_17","texture":"f2+4f65LJLm57d+XHAVG6a","rect":[11,48,42,16],"offset":[0,-24],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":128},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2}],"verticesCount":4}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":128,"length":12}}],"_minPos":{"__type__":"cc.Vec3","x":-0.5,"y":-0.5},"_maxPos":{"__type__":"cc.Vec3","x":0.5,"y":0.5}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_54","texture":"09hQTSwfFD7KEp9v2R+PTX","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_pressed","texture":"b4P/PCArtIdIH38t6mlw8Y","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_45","texture":"6fXI/FbglG3o1p0Pl0DF9r","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_18","texture":"ffLa5IBjdIrZVIGSUrIYy4","rect":[8,48,48,16],"offset":[0,-24],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_normal","texture":"e8Ueib+qJEhL6mXAHdnwbi","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_01","texture":"63ZZYO/sZMs5Zbvwtr0q1z","rect":[63,63,1,1],"offset":[31.5,-31.5],"originalSize":[64,64],"capInsets":[0,0,0,0]}},{"__type__":"cc.SpriteFrame","content":{"name":"IndicatorAnim64x64]_44","texture":"e1EZcH9MlMY78QlE7YytHx","rect":[0,0,64,64],"offset":[0,0],"originalSize":[64,64],"capInsets":[0,0,0,0]}}]